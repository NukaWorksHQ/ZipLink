@inject AccountState accountState
@inject IAuthValidator authValidator
@inject IAccountService accountService
@inject NavigationManager Navigation
@inject ILocalizationService LocalizationService
@implements IDisposable

<div class="miniview accountmgmt">
	<div class="miniview__body">
		@if (CurrentView == AccountView.ACCOUNT_STAT)
		{
			<p class="tooltip__title">@LocalizationService.GetString("Account.Stats")</p>

			<p>
				@LocalizationService.GetString("Account.CreatedAt"): @(accountState.Property?.CreatedAt != null
							? accountState.Property.CreatedAt.ToShortDateString()
							: @LocalizationService.GetString("Common.NotAvailable"))
			</p>

			<p>@LocalizationService.GetString("Account.UserType"): @(UserClaim?.Role.ToString() ?? @LocalizationService.GetString("Common.Unknown"))</p>
			<p>@LocalizationService.GetString("Account.NumberOfLinksCreated"): @(accountState.Property?.Links?.Count ?? 0)</p>

			@if (UserClaim?.Role == UserRole.Admin)
			{
				<p class="miniview__link" @onclick="HandleNavigateToAdmin">@LocalizationService.GetString("Account.AdminDashboard")</p>
			}

			<p class="miniview__link" @onclick="() => HandleChangeView(AccountView.ACCOUNT_RESET_PASSWORD)">@LocalizationService.GetString("Account.ChangePassword")</p>
			<p class="miniview__link" @onclick="() => HandleChangeView(AccountView.ACCOUNT_CREATION_FORM)">@LocalizationService.GetString("Account.LoginCreateAccount")</p>
			<p class="miniview__link" @onclick="() => HandleChangeView(AccountView.ACCOUNT_EDIT_LINKS)">@LocalizationService.GetString("Account.EditLinks")</p>

			<div class="miniview__actions">
				<button class="button__danger" @onclick="HandleLogout">@LocalizationService.GetString("Common.Logout")</button>
			</div>
		}
		
		else if (CurrentView == AccountView.ACCOUNT_CREATION_FORM)
		{
			<AccountCreationForm OnGoBack="() => HandleChangeView(AccountView.ACCOUNT_STAT)" OnSubmit="() => HandleChangeView(AccountView.ACCOUNT_STAT)" />
		} 
		
		else if (CurrentView == AccountView.ACCOUNT_RESET_PASSWORD)
		{
			<ResetPasswordForm OnGoBack="() => HandleChangeView(AccountView.ACCOUNT_STAT)" OnSubmit="() => HandleChangeView(AccountView.ACCOUNT_STAT)" />
		}
		
		else if (CurrentView == AccountView.ACCOUNT_EDIT_LINKS)
		{
			<EditLinksForm OnGoBack="() => HandleChangeView(AccountView.ACCOUNT_STAT)" />
		}
	</div>
</div>

@code {
	public required UserClaimResponse UserClaim { get; set; }
	protected AccountView CurrentView = AccountView.ACCOUNT_STAT;

	protected enum AccountView
	{
		ACCOUNT_STAT,
		ACCOUNT_CREATION_FORM,
		ACCOUNT_RESET_PASSWORD,
		ACCOUNT_EDIT_LINKS
	}

	protected void HandleChangeView(AccountView accountView)
	{
		CurrentView = accountView;
	}

	protected override async Task OnInitializedAsync()
	{
		UserClaim = await authValidator.GetUserClaim();
		LocalizationService.OnLanguageChanged += StateHasChanged;
	}

	protected async Task HandleLogout()
	{
		await accountService.Logout();
	}

	protected void HandleNavigateToAdmin()
	{
		Navigation.NavigateTo("/admin");
	}

	public void Dispose()
	{
		LocalizationService.OnLanguageChanged -= StateHasChanged;
	}
}
