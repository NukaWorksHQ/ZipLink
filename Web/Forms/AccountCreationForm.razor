@inject IAccountService accountService
@inject IAuthValidator authValidator
@inject AccountState accountState
@inject ILocalizationService LocalizationService
@implements IDisposable

<p class="tooltip__title">@LocalizationService.GetString("Auth.LoginSignup")</p>

<EditForm class="miniview__form" Model="dto" OnValidSubmit="HandleSubmit">
	<DataAnnotationsValidator />

	<InputText name="username" autocomplete="username" placeholder="@LocalizationService.GetString("Common.Username")" @bind-Value="dto.Username"/>
	<ValidationMessage For="() => dto.Username" />

	<InputText name="password" autocomplete="current-password" type="password" placeholder="@LocalizationService.GetString("Common.Password")" @bind-Value="dto.Password" />
	<ValidationMessage For="() => dto.Password" />

	<div class="miniview__actions">
		<button type="button" @onclick="GoBack">@LocalizationService.GetString("Common.Back")</button>
		<button type="submit">@LocalizationService.GetString("Common.Submit")</button>
	</div>
</EditForm>

@code {
	private readonly AuthDto dto = new() { Username = "", Password = "" };

	[Parameter] public EventCallback OnGoBack { get; set; }
	[Parameter] public EventCallback OnSubmit { get; set; }

	protected override void OnInitialized()
	{
		LocalizationService.OnLanguageChanged += StateHasChanged;
	}

	public void Dispose()
	{
		LocalizationService.OnLanguageChanged -= StateHasChanged;
	}

	private async Task GoBack()
	{
		if (OnGoBack.HasDelegate)
			await OnGoBack.InvokeAsync();
	}

	private async Task HandleSubmit()
	{
		try
		{
			var token = await accountService.Login(dto);
			await authValidator.PrepareAndValidate(token);
			var userClaim = await authValidator.GetUserClaim();

			var user = await accountService.GetUser(userClaim.UserId);
			accountState.Property = user;
		} catch (Exception)
		{
			Console.WriteLine("Failed to login, creating a new account instead");
		}

		try
		{
			var token = await accountService.Create(dto);
			await authValidator.PrepareAndValidate(token);
			var userClaim = await authValidator.GetUserClaim();

			var user = await accountService.GetUser(userClaim.UserId);
			accountState.Property = user;
		}
		catch (Exception e)
		{
			Console.WriteLine("Failed to create a new account: " + e.Message);
		}

		if (OnSubmit.HasDelegate)
			await OnSubmit.InvokeAsync();
	}
}
