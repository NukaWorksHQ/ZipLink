@inject IJSRuntime JS

@if (IsOpened)
{
    @if (IsBackdropEnabled)
    {
        <div class="tooltip__backdrop" @onclick="Toggle"></div>
    }

    <div class="tooltip" style="@PositionStyle">
        @if (!string.IsNullOrEmpty(Title)) 
        {
            <p class="tooltip__title">@Title</p>
        }
        <div class="tooltip__body">@ChildContent</div>
    </div>
}

@code {
    [Parameter] public required string Title { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public ElementReference? AnchorRef { get; set; }
    [Parameter] public bool IsBackdropEnabled { get; set; } = true;
    [Parameter] public bool IsOpened { get; set; } = false;

    private string PositionStyle = "";

    [JSInvokable]
    public async Task UpdateTooltipPosition()
    {
        var anchorRect = await JS.InvokeAsync<BoundingRect>("getBoundingClientRect", AnchorRef);
        var tooltipSize = await JS.InvokeAsync<BoundingRect>("getTooltipSize");
        var viewportSize = await JS.InvokeAsync<BoundingRect>("getViewportSize");

        // Start with default position below anchor
        var top = anchorRect.Bottom + 8;
        var left = anchorRect.Left;

        // Flip above if it overflows bottom
        if (top + tooltipSize.Height > viewportSize.Height)
        {
            top = anchorRect.Top - tooltipSize.Height - 8;
        }

        // Shift left if overflowing right edge
        if (left + tooltipSize.Width > viewportSize.Width)
        {
            left = viewportSize.Width - tooltipSize.Width - 8;
        }

        // Prevent overflow on the left edge
        if (left < 8)
        {
            left = 8;
        }

        PositionStyle = $"position: absolute; top: {top}px; left: {left}px;";
        StateHasChanged();
    }

    public void Toggle()
    {
        IsOpened = !IsOpened;

        // if (IsOpened)
        // {
        //     JS.InvokeVoidAsync("registerResizeHandler", DotNetObjectReference.Create(this));
        // }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsOpened)
        {
            await JS.InvokeVoidAsync("registerResizeHandler", DotNetObjectReference.Create(this));
        }

        if (IsOpened && AnchorRef != null && string.IsNullOrEmpty(PositionStyle))
        {

            await UpdateTooltipPosition();
        }
    }
}
