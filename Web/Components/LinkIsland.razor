@using System.Text.Json

@implements IDisposable
@inject AccountState accountState
@inject IAuthValidator authValidator
@inject IAccountService accountService
@inject ILinkService linkService

<div class="island">
	<EditForm class="island__form" Model="dto" OnSubmit="HandleSubmit">
		<InputText @bind-Value="dto.Target" placeholder="Enter a long URL here..." />
		<button type="submit">Shorten</button>
	</EditForm>
</div>

@code {
    private readonly LinkCreateDto dto = new() {UserId = "", Target = ""};

    protected override void OnInitialized()
    {
        accountState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        accountState.OnChange -= StateHasChanged;
    }

    private async Task CreateAccount()
    {
        var userClaim = await accountService.GenerateTempAccount();
        var user = await accountService.GetUser(userClaim.UserId);
        accountState.Property = user;

        Console.WriteLine(JsonSerializer.Serialize(user));
    }

    private async Task HandleSubmit(EditContext context)
    {
        bool isValid = context.Validate();
        if (isValid && !authValidator.IsAuthenticated())
        {
            try
            {
                await authValidator.PrepareAndValidate();
                if (authValidator.IsAuthenticated())
                    return;
            }
            catch (Exception)
            {
                Console.WriteLine("Account Missing, Continuing by making a new account...");
            }

            await CreateAccount();
        }

        if (isValid)
        {
            var userClaim = await authValidator.GetUserClaim();

            // Update dto UserId
            if (userClaim is null)
                throw new InvalidOperationException("userClaim cannot be null");

            dto.UserId = userClaim.UserId;
			var link = await linkService.Create(dto);
			Console.WriteLine(JsonSerializer.Serialize(link));
		}
	}
}
