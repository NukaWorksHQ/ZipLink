@page "/stats"
@inject IStatsService StatsService
@inject AccountState AccountState
@implements IDisposable

<PageTitle>Statistiques - stfu.lat</PageTitle>

@if (AccountState.Property?.Id != null)
{
    <AccountIsland />
}

<div class="controls">
    <div class="stats-container">
        <h1 class="stats-title">üìä Statistiques Publiques</h1>
        
        @if (_isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p>Chargement des statistiques...</p>
            </div>
        }
        else if (_stats != null)
        {
            @if (_stats.TopApiHosts.Any())
            {
                <div class="top-hosts-section">
                    <h2>üèÜ Domaines les plus populaires</h2>
                    <div class="hosts-list">
                        @foreach (var host in _stats.TopApiHosts)
                        {
                            <div class="host-item">
                                <span class="host-name">@host.HostName</span>
                                <div class="host-stats">
                                    <span class="host-count">@host.LinkCount.ToString("N0")</span>
                                    <div class="host-bar">
                                        <div class="host-bar-fill" style="width: @(GetPercentage(host.LinkCount, _stats.TopApiHosts.Max(h => h.LinkCount)))%"></div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            <div class="stats-grid">
                <div class="stat-card highlight">
                    <div class="stat-icon">üîó</div>
                    <div class="stat-content">
                        <h3>@_stats.TotalLinks.ToString("N0")</h3>
                        <p>Liens cr√©√©s</p>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">üë•</div>
                    <div class="stat-content">
                        <h3>@_stats.TotalUsers.ToString("N0")</h3>
                        <p>Utilisateurs</p>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">üìÖ</div>
                    <div class="stat-content">
                        <h3>@_stats.LinksToday.ToString("N0")</h3>
                        <p>Liens aujourd'hui</p>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">üìà</div>
                    <div class="stat-content">
                        <h3>@_stats.LinksThisWeek.ToString("N0")</h3>
                        <p>Cette semaine</p>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">üìä</div>
                    <div class="stat-content">
                        <h3>@_stats.LinksThisMonth.ToString("N0")</h3>
                        <p>Ce mois-ci</p>
                    </div>
                </div>
            </div>

            <div class="last-updated">
                Derni√®re mise √† jour : @_stats.LastUpdated.ToString("dd/MM/yyyy HH:mm") UTC
            </div>
        }
        else
        {
            <div class="error-container">
                <div class="error-icon">‚ö†Ô∏è</div>
                <p>Impossible de charger les statistiques</p>
                <button class="retry-button" @onclick="LoadStats">R√©essayer</button>
            </div>
        }
    </div>
</div>

<AppFooter />

<style>
    .stats-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .stats-title {
        text-align: center;
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 3rem;
        color: white;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .stats-grid {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: 1.5rem;
        margin-bottom: 3rem;
        justify-content: center;
    }

    .stat-card {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 16px;
        padding: 2rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        gap: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        min-width: 200px;
        flex: 0 0 auto;
    }

    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 40px rgba(0, 0, 0, 0.2);
        border-color: rgba(255, 255, 255, 0.3);
    }

    .stat-card.highlight {
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.2) 0%, rgba(37, 99, 235, 0.1) 100%);
        border-color: rgba(59, 130, 246, 0.4);
    }

    .stat-icon {
        font-size: 2.5rem;
        opacity: 0.8;
    }

    .stat-content h3 {
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
        color: white;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    }

    .stat-content p {
        font-size: 0.9rem;
        margin: 0.25rem 0 0 0;
        color: rgba(255, 255, 255, 0.8);
    }

    .top-hosts-section {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 16px;
        padding: 2rem;
        margin-bottom: 2rem;
    }

    .top-hosts-section h2 {
        color: white;
        margin-bottom: 1.5rem;
        font-size: 1.5rem;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    }

    .hosts-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .host-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .host-name {
        font-weight: 600;
        color: white;
        font-size: 1.1rem;
    }

    .host-stats {
        display: flex;
        align-items: center;
        gap: 1rem;
        min-width: 200px;
    }

    .host-count {
        color: rgba(255, 255, 255, 0.9);
        font-weight: 600;
        min-width: 50px;
        text-align: right;
    }

    .host-bar {
        flex: 1;
        height: 6px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 3px;
        overflow: hidden;
    }

    .host-bar-fill {
        height: 100%;
        background: linear-gradient(90deg, #3b82f6, #1d4ed8);
        border-radius: 3px;
        transition: width 0.5s ease;
    }

    .last-updated {
        text-align: center;
        color: rgba(255, 255, 255, 0.6);
        font-size: 0.9rem;
        margin-top: 2rem;
    }

    .loading-container, .error-container {
        text-align: center;
        padding: 3rem;
        color: white;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.2);
        border-top: 4px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    .error-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    .retry-button {
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        margin-top: 1rem;
        transition: all 0.3s ease;
    }

    .retry-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
    }

    /* Animation keyframes */
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Media queries */
    @@media (max-width: 768px) {
        .stats-container {
            padding: 1rem;
        }

        .stats-title {
            font-size: 2rem;
        }

        .stat-card {
            padding: 1.5rem;
        }

        .host-stats {
            min-width: 150px;
        }
    }
</style>

@code {
    private PublicStatsDto? _stats;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        AccountState.OnChange += StateHasChanged;
        await LoadStats();
    }

    private async Task LoadStats()
    {
        _isLoading = true;
        _stats = await StatsService.GetPublicStatsAsync();
        _isLoading = false;
        StateHasChanged();
    }

    private double GetPercentage(int value, int max)
    {
        if (max == 0) return 0;
        return (double)value / max * 100;
    }

    public void Dispose()
    {
        AccountState.OnChange -= StateHasChanged;
    }
}
